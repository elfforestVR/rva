#+TITLE: [[file:img/github-header-image.png]]
#+AUTHOR: Vladimir Ryazansew
#+EMAIL: elf.forest@yandex.ru
#+DATE: Четверг, декабря  7 2023
#+OPTIONS: num:nil
#+SETUPFILE: ./setupfiles/header.setup

  Настройка текстового редактора [[https://www.gnu.org/software/emacs/][emacs]].
  Это личная настройка моей системы emacs и в ней
* LInux dotfiles cmd
* Настройка EMACS
** Загружается до *init.el* это файл [[file:early-init.el][early-init.el]]
:PROPERTIES:
:CUSTOM_ID: init
:header-args:emacs-lisp: :tangle ~/.emacs.d/early-init.el :mkdirp yes :shebang ";;-*- mode: emacs-lisp; lexical-binding: t; no-byte-compile: t -*-"
:END:
*** отключить обработку пакетов emacs по умолчанию (нужно сразу)
#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
#+end_src
** Главный файл [[file:~/.emacs.d/init.el][init.el]]
:PROPERTIES:
:CUSTOM_ID: init
:header-args:emacs-lisp: :tangle ~/.emacs.d/init.el :mkdirp yes :shebang ";;-*- mode: emacs-lisp; lexical-binding: t; no-byte-compile: t -*-"
:END:
*** Запуск emacs как сервер

#+begin_src emacs-lisp :lexical no
  (require 'server)
  (unless (server-running-p)
    (server-start))
#+end_src
*** Хоткеи на русской раскладке начало
#+begin_src emacs-lisp
;; ========== Хоткеи на русской раскладке
    ;; должна быть еще строчка в конце файла
(defun cfg:reverse-input-method (input-method)
  "Build the reverse mapping of single letters from INPUT-METHOD."
  (interactive
   (list (read-input-method-name "Use input method (default current): ")))
  (if (and input-method (symbolp input-method))
      (setq input-method (symbol-name input-method)))
  (let ((current current-input-method)
        (modifiers '(nil (control) (meta) (control meta))))
    (when input-method
      (activate-input-method input-method))
    (when (and current-input-method quail-keyboard-layout)
      (dolist (map (cdr (quail-map)))
        (let* ((to (car map))
               (from (quail-get-translation
                      (cadr map) (char-to-string to) 1)))
          (when (and (characterp from) (characterp to))
            (dolist (mod modifiers)
              (define-key local-function-key-map
                (vector (append mod (list from)))
                (vector (append mod (list to)))))))))
    (when input-method
      (activate-input-method current))))
#+end_src
*** Отклбчить некоторые сочетание клавиш
#+begin_src emacs-lisp
 (global-unset-key (kbd "C-z"))

#+end_src
*** Имя операционной системы
#+begin_src emacs-lisp
(setq  system-n system-configuration)
(cond
((equal system-n "x86_64-pc-linux-gnu")(message "linux"))
((equal system-n "aarch64-unknown-linux-android")(message "android"))
)
#+end_src
*** Пакетный мененжер
#+begin_src emacs-lisp
;; Install straight.el
(defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
    ;; Install use-package
  (straight-use-package 'use-package)  
#+end_src
*** Закладки
#+begin_src emacs-lisp
(use-package bookmark
  :straight (:type built-in)
  :custom
  ;; auto-save bookmarks every time they change
  (bookmark-save-flag 1)
)
#+end_src
*** Вспомогательные функции
#+begin_src emacs-lisp
  (defun mkdirp (dir)
  "Проверить если папка создать её если нет и вернуть путь"
  (if (file-exists-p dir)
     (message dir)
     (progn (make-directory dir t)(message dir))
     ))
#+end_src

*** Нумерация строк
#+begin_src emacs-lisp
(add-hook 'text-mode-hook #'display-line-numbers-mode) 
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(setq display-line-numbers-type 'relative)
#+end_src

И отключите это для некоторых режимов.

#+begin_src emacs-lisp
(add-hook 'elfeed-show-mode-hook ( lambda () (display-line-numbers-mode -1)))
(add-hook 'eshell-mode-hook ( lambda () (display-line-numbers- режим -1))) 
(add-hook 'pdf-view-mode-hook ( lambda () (display-line-numbers-mode -1))) 
(add-hook 'shell-mode-hook ( lambda () ( display-line-numbers-mode -1))) 
(add-hook 'eww-mode-hook ( lambda () (display-line-numbers-mode -1)))
(add-hook 'org-mode-hook ( lambda () (display-line-numbers-mode -1)))
#+end_src
*** Навигация по окнам(buferam)
#+begin_src emacs-lisp
(use-package switch-window
  :ensure t
  :straight t
  :bind
  ;; default C-x o is other-window
  ;; default C-x C-o is delete-blank-lines
  (("C-x o" . switch-window)
   ("C-x C-o" . switch-window)
   ("C-x C-o" . switch-window))
  :config
  (setq switch-window-multiple-frames t)
  (setq switch-window-shortcut-style 'qwerty)
  ;; when Emacs is run as client, the first shortcut does not appear
  ;; "x" acts as a dummy; remove first entry if not running server
  (setq switch-window-qwerty-shortcuts '("1" "2" "3" "4" "5" "6" "7" "8" "9" "0" "q" "w" "e" "r" "t" "y" "u" "i" "o;"))
  (setq switch-window-increase 3))
;;
(global-set-key (kbd "C-<up>") 'windmove-up)
(global-set-key (kbd "C-<down>") 'windmove-down)
(global-set-key (kbd "C-<right>") 'windmove-right)
(global-set-key (kbd "C-<left>") 'windmove-left)
;;
(global-set-key (kbd "M-<up>") 'previous-multiframe-window)
(global-set-key (kbd "M-<down>") 'other-window)
#+end_src
*** Общий с ОС буфер обмена:

#+begin_src emacs-lisp
 
#+end_src
h*** запретить emacs создавать файлы резервных копий
#+begin_src emacs-lisp
 (setq make-backup-files nil) ; stop creating ~ files
;; (setq backup-directory-alist            '((".*" . "~/.Trash")))
#+end_src
*** Закрываем пары
#+begin_src emacs-lisp
(electric-pair-mode    1) ;; автозакрытие {},[],() с переводом курсора внутрь скобок
(electric-indent-mode -1) ;; отключить индентацию  electric-indent-mod'ом (default in Emacs-24.4)
(setq electric-pair-pairs '(
                                (?\" . ?\")
                                (?\{ . ?\})
                                (?\< . ?\>)
				(?\( . ?\))
                            ) )
#+end_src
*** Укоротить сообщения в минибуфере:
#+begin_src emacs-lisp
  ;; Short messages
  (defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
*** Проверка орфографии
Приходится много писать и надо проверить орфографию для неё нужны программы
вот как их поставить.
#+begin_src bash :tangle ~/.emacs.d/install.sh
  sudo apt install spell aspell aspell-ru hunspell hunspell-ru
#+end_src
#+begin_src emacs-lisp
  (with-eval-after-load "ispell"
    ;;(setenv "LANG" "en_US.UTF-8")
    (setq ispell-program-name "hunspell")
    (setq ispell-dictionary "en_US,ru_RU")
    (ispell-set-spellchecker-params)
    (ispell-hunspell-add-multi-dic "en_US,ru_RU")
    (setq ispell-personal-dictionary "~/.hunspell_personal"))

  (add-hook 'org-mode-hook 'flyspell-mode)

  (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_SRC" . "#\\+END_SRC"))
  (add-to-list 'ispell-skip-region-alist '("#\\+BEGIN_EXAMPLE" . "#\\+END_EXAMPLE"))
#+end_src
*** TODO Path
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
  :straight t
  :ensure t
  :init
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+end_src

#+begin_src emacs-lisp
   (require 'xdg)

   (cond
     ((equal system-configuration "x86_64-pc-linux-gnu")
      (setq
      VIDEOS_DIR (xdg-user-dir "VIDEOS")
      PICTURES_DIR (xdg-user-dir "PICTURES")
      MUSIC_DIR (xdg-user-dir "MUSIC")
      DOCUMENTS_DIR (xdg-user-dir "DOCUMENTS")
      PUBLICSHARE_DIR (xdg-user-dir "PUBLICSHARE")
      TEMPLATES_DIR (xdg-user-dir "TEMPLATES")
      DOWNLOAD_DIR (xdg-user-dir "DOWNLOAD")
      DESKTOP_DIR (xdg-user-dir "DESKTOP")
      TMP_DIR "~/tmp"
      ))
     ((equal system-configuration "aarch64-unknown-linux-android")
      (message "android")
      (setq
      VIDEOS_DIR (xdg-user-dir "VIDEOS")
      PICTURES_DIR (xdg-user-dir "PICTURES")
      MUSIC_DIR (xdg-user-dir "MUSIC")
      DOCUMENTS_DIR "~/DOCUMENTS"
      PUBLICSHARE_DIR (xdg-user-dir "PUBLICSHARE")
      TEMPLATES_DIR (xdg-user-dir "TEMPLATES")
      DOWNLOAD_DIR (xdg-user-dir "DOWNLOAD")
      DESKTOP_DIR (xdg-user-dir "DESKTOP")
      TMP_DIR "~/tmp"
      
      ))  )
#+end_src

Пути пользователя
#+begin_src emacs-lisp
  (setq
   ORG_MODE_DIR DOCUMENTS_DIR
   DEFT_DIR (mkdirp (concat ORG_MODE_DIR "/Notes")))
#+end_src
*** Имя операционной системы
#+begin_src emacs-lisp
(cond
((equal system-configuration "x86_64-pc-linux-gnu")(message "linux"))
((equal system-configuration "aarch64-unknown-linux-android")(message "android"))
)
#+end_src
*** icons
#+begin_src emacs-lisp
    (use-package all-the-icons
	  :straight t
	  :ensure t
	  :if (display-graphic-p))

    (use-package all-the-icons-dired
	:defer 1
	:straight t
	:after all-the-icons
	:hook (dired-mode . all-the-icons-dired-mode))

    (use-package treemacs-all-the-icons
	:defer 1
	:straight t
	:after all-the-icons treemacs
	:config
	;;(treemacs-load-theme "all-the-icons")
	)

    (use-package all-the-icons-completion
	:defer 1
	:straight t
	:after all-the-icons
	:config
	(add-hook 'marginalia-mode-hook
		  #'all-the-icons-completion-marginalia-setup)
	(all-the-icons-completion-mode 1))
#+end_src
*** emojify
#+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :straight t
  :hook (after-init . global-emojify-mode))
#+end_src
*** Fonts
#+begin_src emacs-lisp
    (ignore-errors (set-frame-font "DroidSansMon"))
    (cond
      ((member "Monaco" (font-family-list))
       (set-face-attribute 'default nil :font "Monaco-12"))
      ((member "Inconsolata" (font-family-list))
       (set-face-attribute 'default nil :font "Inconsolata-12"))
      ((member "Consolas" (font-family-list))
       (set-face-attribute 'default nil :font "Consolas-12"))
      ((member "DejaVu Sans Mono" (font-family-list))
       (set-face-attribute 'default nil :font "DejaVu Sans Mono-14"))
      )
;; (when (member "Roboto Mono" (font-family-list))
;;   (set-face-attribute 'default nil :font "Roboto Mono" :height 140)
;;   (set-face-attribute 'fixed-pitch nil :family "Roboto Mono"))

;; (when (member "Source Sans Pro" (font-family-list))
;;   (set-face-attribute 'variable-pitch nil :family "Source Sans Pro" :height 1.0))

;;     ;; Default Windows emoji font
;; (when (member "Segoe UI Emoji" (font-family-list))
;;   (set-fontset-font t 'symbol (font-spec :family "Segoe UI Emoji") nil 'prepend)
;;   (set-fontset-font "fontset-default" '(#xFE00 . #xFE0F) "Segoe UI Emoji"))

;;   ;; Linux emoji font
;; (when (member "Noto Color Emoji" (font-family-list))
;;   (set-fontset-font t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend)
;;   (set-fontset-font "fontset-default" '(#xFE00 . #xFE0F) "Noto Color Emoji"))
#+end_src
*** Очистка всего не нужного
#+begin_src emacs-lisp
(cond
((equal system-configuration "x86_64-pc-linux-gnu")
 (progn  (menu-bar-mode     -1)
	 (scroll-bar-mode   -1) ;; на сонсоли ошибка
	 (tool-bar-mode     -1)))

((equal system-configuration "aarch64-unknown-linux-android")
 (progn  (menu-bar-mode     -1)))
)
#+end_src
*** добавляет красивый стартовый экран
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :config
    (setq dashboard-projects-backend 'project-el
	  dashboard-banner-logo-title nil
	  dashboard-center-content t
	  dashboard-set-footer nil
	  dashboard-page-separator "\n\n\n"
	  dashboard-items '((projects . 15)
			    (recents  . 15)
			    (bookmarks . 5)))
    (dashboard-setup-startup-hook))
#+end_src
*** Отображение размера файла/времени в режиме-строка
#+begin_src emacs-lisp
(setq display-time-24hr-format t) ;; 24-часовой временной формат в mode-line
(display-time-mode             t) ;; показывать часы в mode-line
(size-indication-mode          t) ;; размер файла в %-ах
#+end_src
*** Сочетание клавиш как в windows (C-c C-v)
#+begin_src emacs-lisp
  (cua-mode 1)
#+end_src
*** Aliases
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src
*** projectile
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :straight t
    :config
    (projectile-mode +1)
    ;; Recommended keymap prefix on Windows/Linux
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    )

#+end_src
*** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :straight t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))
#+end_src

#+begin_src emacs-lisp
  (use-package java-snippets
    :ensure t
    :straight t
    ) 
#+end_src
*** org-mode
#+begin_src emacs-lisp
(use-package org
  :ensure t
  :straight t
  :bind (("C-c c" . org-capture)
	 ("C-c a" . org-agenda)
	 )
  :config
  (setq org-directory ORG_MODE_DIR
	org-adapt-indentation t
	org-hide-leading-stars t
	org-hide-emphasis-markers t
	org-pretty-entities t
	org-edit-src-content-indentation 0)

  (setq org-export-use-babel nil
        org-confirm-babel-evaluate nil
	org-src-tab-acts-natively t
	org-src-preserve-indentation t
	org-src-fontify-natively t)

   (setq-default org-startup-indented t
                  org-pretty-entities t
                  org-use-sub-superscripts "{}"
                  org-hide-emphasis-markers t
                  org-startup-with-inline-images t
                  org-image-actual-width '(300))

  (require 'ob-C)
  (use-package ob-nim :straight t :ensure t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (shell . t)
     (lua . t)
     (dot . t)
     (C . t)
     (nim . t)
     (org . t)
     ))

  (setq org-structure-template-alist
	'(("a" . "export ascii")
	 ("c" . "center")
	 ("C" . "comment")
	 ("exa" . "example")
	 ("ex" . "export")
	 ("h" . "export html")
	 ("l" . "export latex")
	 ("q" . "quote")
	 ("s" . "src")
	 ("em" . "src emacs-lisp")
	 ("b" . "src shell")
	 ("v" . "verse")))
 )
#+end_src
*** org-ref
#+begin_src emacs-lisp
(use-package org-ref
:straight t 
:ensure t
:config 
(define-key org-mode-map (kbd "C-c ]") 'org-ref-insert-link)
)
#+end_src
*** Центрирование и разрывы строк
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
(add-hook 'org-mode-hook 'olivetti-mode)
#+end_src
*** org-appear
#+begin_src emacs-lisp
(use-package org-appear
:straight t 
:ensure t
:config (add-hook 'org-mode-hook 'org-appear-mode))
#+end_src

*** org-transclusion
#+begin_src emacs-lisp
(use-package org-transclusion
:straight t 
:ensure t

)
#+end_src
*** org-modern
#+begin_src emacs-lisp
;; (use-package org-modern
;;  :straight t 
;;  :hook
;;     (org-mode . global-org-modern-mode)
;;     :custom
;;     (org-modern-keyword nil)
;;     (org-modern-checkbox nil)
;;     (org-modern-table nil)
;;     ;; Option 2: Globally
;;     (with-eval-after-load 'org (global-org-modern-mode))
;; )
#+end_src
*** режим писателя
#+begin_src emacs-lisp

(use-package olivetti
:straight t 
:ensure t
:bind ("C-<f11>" .  olivetti-mode))
#+end_src
*** bibtex
#+begin_src emacs-lisp
    (setq
  completion-bibliography '("/home/elf/Doc/BOOK/BOOK.bib")
  completion-library-path '("/home/elf/Doc/BOOK/pdfs")
  completion-notes-path '("/home/elf/Doc/BOOK/notes")
  bibtex-file-path completion-notes-path)

  (setq bibtex-completion-bibliography completion-bibliography
	bibtex-completion-library-path completion-library-path
	bibtex-completion-notes-path completion-notes-path
	bibtex-completion-find-additional-pdfs t
	bibtex-completion-pdf-extension '(".pdf" ".html" ".epub" )
	bibtex-dialect 'biblatex
	bibtex-file-path bibtex-file-path
	bibtex-files '(bibtex-file-path)
	bibtex-autokey-year-length 0
	bibtex-autokey-names 2
	bibtex-autokey-names-stretch 1
	bibtex-autokey-additional-names "EtAl"
	bibtex-autokey-name-case-convert-function 'capitalize
	bibtex-autokey-name-year-separator nil
	bibtex-autokey-year-title-separator "-"
	bibtex-autokey-titleword-separator ""
	bibtex-autokey-titlewords 2
	bibtex-autokey-titlewords-stretch 1
	bibtex-autokey-titleword-length "infnty"
	bibtex-autokey-titleword-case-convert-function 'capitalize
	bibtex-autokey-before-presentation-function 'xah-asciify-string)


  (use-package marginalia
    :ensure t
    :straight t
    :config
    (marginalia-mode))

  (use-package ebib
      :ensure t
      :straight t
      :config
      (org-add-link-type "ebib" 'ebib)
  )

  ;;; EBIB
  (setq
  keywords-file '("/home/elf/Doc/BOOK/notes"))
  (setq ebib-bibtex-dialect 'biblatex
	ebib-preload-bib-files completion-bibliography
	ebib-use-timestamp t ;; todo customize on export info:ebib#Timestamps
	ebib-file-search-dirs completion-library-path
	ebib-notes-directory completion-notes-path
	ebib-notes-storage 'one-file-per-note
	ebib-notes-locations completion-notes-path
	ebib-notes-default-file nil 
	ebib-keywords-file keywords-file
	ebib-keywords-field-keep-sorted t
	ebib-keywords-file-save-on-exit 'always
	ebib-notes-show-note-method 'top-lines
	ebib-notes-display-max-lines 300
	ebib-popup-entry-window nil ;; no effect unless ebib-layout set to ’index-only
	ebib-layout 'index-only)


  (use-package citar
    :no-require
    :straight t
    :custom
    (org-cite-global-bibliography completion-bibliography)
    (org-cite-insert-processor 'citar)
    (org-cite-follow-processor 'citar)
    (org-cite-activate-processor 'citar)
    (citar-bibliography org-cite-global-bibliography)
    ;; optional: org-cite-insert is also bound to C-c C-x C-@
    :bind
    (:map org-mode-map :package org ("C-c b" . #'org-cite-insert)))

#+end_src
*** org-theme
#+begin_src emacs-lisp
  (use-package org-bullets
  :straight t
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("➊" "➋" "➌" "➍" "➎" "➏" "➐" "➑" "➒" "➓")))
#+end_src
https://sophiebos.io/posts/beautifying-emacs-org-mode/
#+begin_src emacs-lisp
;; Resize Org headings
(dolist (face '((org-level-1 . 1.35)
                (org-level-2 . 1.3)
                (org-level-3 . 1.2)
                (org-level-4 . 1.1)
                (org-level-5 . 1.1)
                (org-level-6 . 1.1)
                (org-level-7 . 1.1)
                (org-level-8 . 1.1)))
  (set-face-attribute (car face) nil :font "Source Sans Pro" :weight 'bold :height (cdr face)))

;; Make the document title a bit bigger
(set-face-attribute 'org-document-title nil :font "Source Sans Pro" :weight
'bold :height 1.8)

(require 'org-indent)
(set-face-attribute 'org-indent nil :inherit '(org-hide fixed-pitch))

(set-face-attribute 'org-block nil            :foreground nil :inherit
'fixed-pitch :height 0.85)
(set-face-attribute 'org-code nil             :inherit '(shadow fixed-pitch) :height 0.85)
(set-face-attribute 'org-indent nil           :inherit '(org-hide fixed-pitch) :height 0.85)
(set-face-attribute 'org-verbatim nil         :inherit '(shadow fixed-pitch) :height 0.85)
(set-face-attribute 'org-special-keyword nil  :inherit '(font-lock-comment-face
fixed-pitch))
(set-face-attribute 'org-meta-line nil        :inherit '(font-lock-comment-face fixed-pitch))
(set-face-attribute 'org-checkbox nil         :inherit 'fixed-pitch)

(add-hook 'org-mode-hook 'variable-pitch-mode)

(plist-put org-format-latex-options :scale 2)


(setq org-adapt-indentation t
      org-hide-leading-stars t
      org-pretty-entities t
	  org-ellipsis "  ·")

(setq org-src-fontify-natively t
	  org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)

(use-package org-appear
  :straight t
  :ensure t
  :commands (org-appear-mode)
  :hook     (org-mode . org-appear-mode)
  :config
  (setq org-hide-emphasis-markers t)  ; Must be activated for org-appear to work
  (setq org-appear-autoemphasis   t   ; Show bold, italics, verbatim, etc.
        org-appear-autolinks      t   ; Show links
		org-appear-autosubmarkers t)) ; Show sub- and superscripts

(setq org-log-done                       t
	  org-auto-align-tags                t
	  org-tags-column                    -80
	  org-fold-catch-invisible-edits     'show-and-error
	  org-special-ctrl-a/e               t
	  org-insert-heading-respect-content t)


(plist-put org-format-latex-options :scale 1.35)

(use-package org-fragtog
  :hook (org-mode-hook . org-fragtog-mode))

(add-hook 'org-mode-hook 'visual-line-mode)

(add-hook 'org-mode-hook 'olivetti-mode)

(setq org-lowest-priority ?F)  ;; Gives us priorities A through F
(setq org-default-priority ?E) ;; If an item has no priority, it is considered [#E].

(setq org-priority-faces
      '((65 . "#BF616A")
        (66 . "#EBCB8B")
        (67 . "#B48EAD")
        (68 . "#81A1C1")
        (69 . "#5E81AC")
        (70 . "#4C566A")))

(setq org-todo-keywords
      '((sequence
		 "TODO(t)" "WAIT(w)" "READ(r)" "PROG(p)" ; Needs further action
		 "|"
		 "DONE(d)")))                            ; Needs no action currently

(setq org-todo-keyword-faces
      '(("TODO(t)"      :inherit (org-todo region) :foreground "#A3BE8C" :weight bold)
		...))

(use-package svg-tag-mode
:straight t
:config
  (defconst date-re "[0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\}")
  (defconst time-re "[0-9]\\{2\\}:[0-9]\\{2\\}")
  (defconst day-re "[A-Za-z]\\{3\\}")
  (defconst day-time-re (format "\\(%s\\)? ?\\(%s\\)?" day-re time-re))

  (defun svg-progress-percent (value)
	(svg-image (svg-lib-concat
				(svg-lib-progress-bar (/ (string-to-number value) 100.0)
			      nil :margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
				(svg-lib-tag (concat value "%")
				  nil :stroke 0 :margin 0)) :ascent 'center))

  (defun svg-progress-count (value)
	(let* ((seq (mapcar #'string-to-number (split-string value "/")))
           (count (float (car seq)))
           (total (float (cadr seq))))
	  (svg-image (svg-lib-concat
				  (svg-lib-progress-bar (/ count total) nil
					:margin 0 :stroke 2 :radius 3 :padding 2 :width 11)
				  (svg-lib-tag value nil
					:stroke 0 :margin 0)) :ascent 'center)))
  (setq svg-tag-tags
      `(
        ;; Task priority
        ("\\[#[A-Z]\\]" . ( (lambda (tag)
                              (svg-tag-make tag :face 'org-priority
                                            :beg 2 :end -1 :margin 0))))

        ;; Progress
        ("\\(\\[[0-9]\\{1,3\\}%\\]\\)" . ((lambda (tag)
          (svg-progress-percent (substring tag 1 -2)))))
        ("\\(\\[[0-9]+/[0-9]+\\]\\)" . ((lambda (tag)
          (svg-progress-count (substring tag 1 -1)))))

        ;; Citation of the form [cite:@Knuth:1984]
        ("\\(\\[cite:@[A-Za-z]+:\\)" . ((lambda (tag)
                                          (svg-tag-make tag
                                                        :inverse t
                                                        :beg 7 :end -1
                                                        :crop-right t))))
        ("\\[cite:@[A-Za-z]+:\\([0-9]+\\]\\)" . ((lambda (tag)
                                                (svg-tag-make tag
                                                              :end -1
                                                              :crop-left t))))


        ;; Active date (with or without day name, with or without time)
        (,(format "\\(<%s>\\)" date-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :end -1 :margin 0))))
        (,(format "\\(<%s \\)%s>" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :beg 1 :inverse nil :crop-right t :margin 0))))
        (,(format "<%s \\(%s>\\)" date-re day-time-re) .
         ((lambda (tag)
            (svg-tag-make tag :end -1 :inverse t :crop-left t :margin 0))))

        ;; Inactive date  (with or without day name, with or without time)
         (,(format "\\(\\[%s\\]\\)" date-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :end -1 :margin 0 :face 'org-date))))
         (,(format "\\(\\[%s \\)%s\\]" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :beg 1 :inverse nil
						       :crop-right t :margin 0 :face 'org-date))))
         (,(format "\\[%s \\(%s\\]\\)" date-re day-time-re) .
          ((lambda (tag)
             (svg-tag-make tag :end -1 :inverse t
						       :crop-left t :margin 0 :face 'org-date)))))))

(add-hook 'org-mode-hook 'svg-tag-mode)

(defun my/prettify-symbols-setup ()
  ;; Checkboxes
  (push '("[ ]" . "") prettify-symbols-alist)
  (push '("[X]" . "") prettify-symbols-alist)
  (push '("[-]" . "-" ) prettify-symbols-alist)

  ;; org-abel
  (push '("#+BEGIN_SRC" . ?≫) prettify-symbols-alist)
  (push '("#+END_SRC" . ?≫) prettify-symbols-alist)
  (push '("#+begin_src" . ?≫) prettify-symbols-alist)
  (push '("#+end_src" . ?≫) prettify-symbols-alist)

  (push '("#+BEGIN_QUOTE" . ?❝) prettify-symbols-alist)
  (push '("#+END_QUOTE" . ?❞) prettify-symbols-alist)

  ;; Drawers
  (push '(":PROPERTIES:" . "👁") prettify-symbols-alist)

  ;; Tags
  (push '(":emacs:"    . "") prettify-symbols-alist)
  
  (prettify-symbols-mode))

(add-hook 'org-mode-hook        #'my/prettify-symbols-setup)
(add-hook 'org-agenda-mode-hook #'my/prettify-symbols-setup)

#+end_src
*** deft
#+begin_src emacs-lisp
  (use-package deft
  :straight t
      :ensure t
      :bind (("C-<f6>" . deft-find-file)
	     ("<f6>" . deft))
      :config 
      (setq deft-default-extension "org")
      (setq deft-extensions '("org"))
      (setq deft-directory DEFT_DIR)
      (setq deft-recursive t)
      (setq deft-use-filename-as-title nil)
      (setq deft-use-filter-string-for-filename t)
      (setq deft-file-naming-rules '((noslash . "-")
				     (nospace . "-")
				     (case-fn . downcase)))
      (setq deft-text-mode 'org-mode)
      )

#+end_src

*** org-roam
#+begin_src bash :tangle ~/.emacs.d/install.sh
  sudo apt install sqlite
#+end_src

#+begin_src emacs-lisp
  (setq user-home-notes (concat DOCUMENTS_DIR "2brain"))
  (use-package org-roam
  :straight t
  :ensure t
  :init
  (setq org-roam-v2-ack t)
  :custom
    (org-roam-dailies-directory "daily/")

    (org-roam-dailies-capture-templates
	'(("d" "default" entry
	   "* %?"
	   :target (file+head "%<%Y-%m-%d>.org"
			      "#+title: %<%Y-%m-%d>\n"))))
    (org-roam-directory user-home-notes)
    (org-roam-completion-everywhere t)
    (org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
	 :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
    :bind (("C-c n l" . org-roam-buffer-toggle)
	   ("C-c n f" . org-roam-node-find)
	   ("C-c n i" . org-roam-node-insert)
	   :map org-mode-map
	   ("C-M-i" . completion-at-point)
	   :map org-roam-dailies-map
	   ("Y" . org-roam-dailies-capture-yesterday)
	   ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies) ;; Ensure the keymap is available
    (org-roam-db-autosync-mode)
    (require 'org-roam-export))

  (use-package websocket
  :straight t
  :ensure t
  :after org-roam)

  (use-package org-roam-ui
  :straight t
  :after org-roam
  :ensure t
  :config
      (setq org-roam-ui-sync-theme t
	    org-roam-ui-follow t
	    org-roam-ui-update-on-save t
	    org-roam-ui-open-on-start t))
#+end_src
*** pdfTools
#+begin_src emacs-lisp

(use-package org-pdftools
  :straight t
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :straight t
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freepointer-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))

#+end_src

#+begin_src emacs-lisp
;; (use-package org-noter
;;   :straight t
;;   :config
;;   ;; Your org-noter config ........
;;   (require 'org-noter-pdftools))
#+end_src
*** djvu
#+begin_src emacs-lisp
(use-package djvu
  :straight t
  :config
)
#+end_src
*** nov
#+begin_src emacs-lisp
(use-package nov
  :straight t
  :config
)
#+end_src
*** Мимолетные заметки
#+begin_src emacs-lisp
 ;; Fleeting notes in Scratch Buffer
  (setq initial-major-mode 'org-mode
        initial-scratch-message
        "#+title: Scratch Buffer\n\nFor random thoughts.\n\n")

  (use-package persistent-scratch
    :straight t
    :hook
    (after-init . persistent-scratch-setup-default)
    :init
    (persistent-scratch-setup-default)
    (persistent-scratch-autosave-mode)
    :bind
    (("C-c w x" . scratch-buffer)))
#+end_src
*** lisp

#+begin_src emacs-lisp
  ;;(straight-use-package 'slime)
 ;; Superior Lisp Interaction Mode for Emacs
(use-package slime
  :defer t
  :straight t
  :config
  (setq inferior-lisp-program "sbcl")
  ;;(setq inferior-lisp-program "ecl")

  (setq lisp-loop-forms-indentation   6
        lisp-simple-loop-indentation  2
        lisp-loop-keyword-indentation 6))
#+end_src
*** emmet-mode
#+begin_src emacs-lisp
(use-package  emmet-mode
  :straight t
  :ensure t
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'css-mode-hook  'emmet-mode) ;; enable Emmet's css abbreviation.
)
#+end_src
*** lsp
#+begin_src emacs-lisp
  (use-package lsp-mode
  :straight t
    :hook ((js2-mode        . lsp-deferred)
	   (js-mode         . lsp-deferred)
	   (rjsx-mode       . lsp-deferred)
	   (typescript-mode . lsp-deferred)
	   (rust-mode       . lsp-deferred)
	   (python-mode     . lsp-deferred)
	   (ruby-mode       . lsp-deferred))
    :commands (lsp lsp-deferred)
    :custom
    ;; what to use when checking on-save. "check" is default, I prefer clippy
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all nil)
    (lsp-idle-delay 0.6)
    (lsp-signature-render-documentation nil)
    (lsp-eldoc-enable-hover nil)
    ;; enable / disable the hints as you prefer:
    (lsp-rust-analyzer-server-display-inlay-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints nil)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names nil)
    (lsp-rust-analyzer-display-closure-return-type-hints nil)
    (lsp-rust-analyzer-display-parameter-hints nil)
    (lsp-rust-analyzer-display-reborrow-hints nil)

    :config
    (setq lsp-enable-completion-at-point t))


  (use-package lsp-ui
  :straight t
    :after lsp-mode
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-enable t)
    (lsp-ui-sideline-enable t)
    (lsp-ui-flycheck-enable t)
    (lsp-ui-flycheck-live-reporting t)
    (lsp-ui-sideline-toggle-symbols-info t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-peek-enable t)

    (lsp-ui-peek-always-show t)
    (lsp-ui-sideline-show-hover t)

    (lsp-ui-sideline-enable t)
    (lsp-ui-sideline-show-code-actions t)
    ;;(lsp-ui-doc-enable nil)

    )


  (use-package lsp-java
    :straight t
    :ensure  t
    :config
    (setq lsp-java-jdt-download-url  "https://download.eclipse.org/jdtls/milestones/0.57.0/jdt-language-server-0.57.0-202006172108.tar.gz")

    )

  (use-package eglot :straight t :ensure t)





  (use-package eglot-java
    :straight t
    :ensure t
    :config
    (add-hook 'eglot-java-mode-hook (lambda ()                                        
				      (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
				      (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
				      (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
				      (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
				      (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
				      (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh))))

  (add-hook 'java-mode-hook #'lsp)
  (add-hook 'ja2-mode-hook #'lsp)
  (add-hook 'css-mode-hook #'lsp)
  (add-hook 'web-mode-hook #'lsp)

  (add-hook 'ja2-mode-hook #'lsp-ui-mode)
  (add-hook 'css-mode-hook #'lsp-ui-mode)
  (add-hook 'web-mode-hook #'lsp-ui-mode)
  
  (add-hook 'java-mode-hook 'eglot-java-mode)
#+end_src
*** tree-sitter
#+begin_src emacs-lisp
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)

(require 'tree-sitter)
(require 'tree-sitter-hl)
(require 'tree-sitter-langs)
(require 'tree-sitter-debug)
(require 'tree-sitter-query)

(global-tree-sitter-mode)
#+end_src
*** company
#+begin_src emacs-lisp

;; (straight-use-package 'company-quickhelp)
;; (straight-use-package 'slime-company)

;; (use-package company
;;   :straight t
;;   :ensure t
;;   :bind ("C-<tab>" . company-indent-or-complete-common)
;;   :config
;;   (company-quickhelp-mode 1)
;;   (setq company-quickhelp-delay 0.7
;; 	company-tooltip-align-annotations t)

;;   (global-company-mode)
;;   (push 'slime-company slime-contribs)

;;   )

(provide 'portacle-company)

(straight-use-package 'company) 
(straight-use-package 'company-quickhelp)
(straight-use-package 'slime-company)

(require 'company)

(company-quickhelp-mode 1)
(setq company-quickhelp-delay 0.7
      company-tooltip-align-annotations t)

(global-company-mode)
(push 'slime-company slime-contribs)

(setq company-idle-delay 0)

 ;; Use C-/ to manually start company mode at point. C-/ is used by undo-tree.
  ;; Override all minor modes that use C-/; bind-key* is discussed below.
(bind-key* "C-`" #'company-manual-begin)

; Show suggestions after entering one character.
;; (setq company-minimum-prefix-length 1)
; Use tab key to cycle through suggestions.
; ('tng' means 'tab and go')
;; (company-tng-configure-default)
;; (use-package company-flx
;;   :after company
;;   :straight t
;;   :config
;;   (company-flx-mode +1))

;; (use-package prescient
;;   :defer 1
;;   :straight t
;;   :config
;;   (prescient-persist-mode 1))
#+end_src
*** lua
    #+begin_src emacs-lisp
(use-package lua-mode
  :straight t
  :ensure t
  :config
   (autoload 'lua-mode "lua-mode" "Lua editing mode." t)
   (add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
   (add-to-list 'interpreter-mode-alist '("lua" . lua-mode))
  )
  #+end_src
*** sql
#+begin_src emacs-lisp
 (use-package emacsql
    :ensure t
    :straight t
    )
#+end_src
*** js
#+begin_src emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'"
  :straight t
  :config
  (setq typescript-indent-level 2))

(defun dw/set-js-indentation ()
  (setq js-indent-level 2)
  (setq evil-shift-width js-indent-level)
  (setq-default tab-width 2))

(use-package js2-mode
  :mode "\\.jsx?\\'"
  :straight t
  :config
  ;; Use js2-mode for Node scripts
  (add-to-list 'magic-mode-alist '("#!/usr/bin/env node" . js2-mode))

  ;; Don't use built-in syntax checking
  (setq js2-mode-show-strict-warnings nil)

  ;; Set up proper indentation in JavaScript and JSON files
  (add-hook 'js2-mode-hook #'dw/set-js-indentation)
  (add-hook 'json-mode-hook #'dw/set-js-indentation))


(use-package apheleia
  :straight t
  :config
  (apheleia-global-mode +1))

(use-package prettier-js
  :straight t
  ;; :hook ((js2-mode . prettier-js-mode)
  ;;        (typescript-mode . prettier-js-mode))
  :config
  (setq prettier-js-show-errors nil))
#+end_src
*** html
#+begin_src emacs-lisp
(use-package web-mode
	:straight t
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer

(use-package impatient-mode
  :straight t)

(use-package skewer-mode
  :straight t)

#+end_src
*** C/C++
#+begin_src emacs-lisp

(use-package ccls :straight t :hook ((c-mode c++-mode objc-mode
	cuda-mode) .  (lambda () (require 'ccls) (lsp))))

(use-package auto-header
  :straight t 
  :ensure t
  :config (add-hook 'c-mode-hook #'auto-header-mode))

#+end_src

*** uml
#+begin_src emacs-lisp
(use-package plantuml-mode
  :straight t
  :after org    ; strictly not needed, but i use it mainly from org
  :init
  (setq plantuml-jar-path "~/.emacs.d/lib/plantuml.jar")
  (setq org-plantuml-jar-path plantuml-jar-path)
  (setq plantuml-default-exec-mode 'jar))

(setq org-ditaa-jar-path    "~/.emacs.d/lib/ditaa0_9.jar")

(use-package graphviz-dot-mode
  :ensure t
  :straight t
  :config
  (setq graphviz-dot-indent-width 4))

(add-hook 'graphviz-dot-mode-hook 'company-mode)

#+end_src
*** ruby
#+begin_src emacs-lisp
(use-package ruby-mode
  :ensure t
  :straight t
  :config
  ;; (use-package ruby-hash-syntax :straight t :ensure t)
  ;; (add-auto-mode 'ruby-mode
  ;; 		 "Rakefile\\'" "\\.rake\\'" "\\.rxml\\'"
  ;; 		 "\\.rjs\\'" "\\.irbrc\\'" "\\.pryrc\\'" "\\.builder\\'" "\\.ru\\'"
  ;; 		 "\\.gemspec\\'" "Gemfile\\'")


)
#+end_src
*** rust
#+begin_src emacs-lisp
(use-package rustic
  :ensure
  :straight t
  :bind (:map rustic-mode-map
              ("M-j" . lsp-ui-imenu)
              ("M-?" . lsp-find-references)
              ("C-c C-c l" . flycheck-list-errors)
              ("C-c C-c a" . lsp-execute-code-action)
              ("C-c C-c r" . lsp-rename)
              ("C-c C-c q" . lsp-workspace-restart)
              ("C-c C-c Q" . lsp-workspace-shutdown)
              ("C-c C-c s" . lsp-rust-analyzer-status))
  :config
  ;; uncomment for less flashiness
  ;; (setq lsp-eldoc-hook nil)
  ;; (setq lsp-enable-symbol-highlighting nil)
  ;; (setq lsp-signature-auto-activate nil)

  ;; comment to disable rustfmt on save
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

(defun rk/rustic-mode-hook ()
  ;; so that run C-c C-c C-r works without having to confirm, but don't try to
  ;; save rust buffers that are not file visiting. Once
  ;; https://github.com/brotzeit/rustic/issues/253 has been resolved this should
  ;; no longer be necessary.
  (when buffer-file-name
    (setq-local buffer-save-without-query t))
  (add-hook 'before-save-hook 'lsp-format-buffer nil t))

#+end_src
*** Лигатурные шрифты для терминала
#+begin_src emacs-lisp
(use-package ligature
  :straight t
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       ))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src
*** tereminal
#+begin_src emacs-lisp
(use-package term
  :straight t
  :config
  (setq explicit-shell-file-name "bash")
  ;;(setq explicit-zsh-args '())
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))

(use-package eterm-256color
  :straight t
  :hook (term-mode . eterm-256color-mode))

(use-package vterm
  :commands vterm
  :straight t
  :config
  (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
  ;;(setq vterm-shell "zsh")
  (setq vterm-max-scrollback 10000))

(setq comint-output-filter-functions
      (remove 'ansi-color-process-output comint-output-filter-functions))

(add-hook 'shell-mode-hook
          (lambda ()
            ;; Disable font-locking in this buffer to improve performance
            (font-lock-mode -1)
            ;; Prevent font-locking from being re-enabled in this buffer
            (make-local-variable 'font-lock-function)
            (setq font-lock-function (lambda (_) nil))
            (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter nil t)))


(defun efs/configure-eshell ()
  ;; Save command history when commands are entered
  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

  ;; Truncate buffer for performance
  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

  ;; Bind some useful keys for evil-mode
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "C-r") 'counsel-esh-history)
  (evil-define-key '(normal insert visual) eshell-mode-map (kbd "<home>") 'eshell-bol)
  (evil-normalize-keymaps)

  (setq eshell-history-size         10000
        eshell-buffer-maximum-lines 10000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t))

(use-package eshell
  :straight t
  :hook (eshell-first-time-mode . efs/configure-eshell))

(use-package eshell-git-prompt 
:straight t

:config
(eshell-git-prompt-use-theme 'powerline))

(with-eval-after-load 'esh-opt
  (setq eshell-destroy-buffer-when-process-dies t)
  (setq eshell-visual-commands '("htop" "zsh" "vim" "bash")))


#+end_src
*** rss
#+begin_src emacs-lisp
;; Configure Elfeed
(use-package elfeed
    :ensure t
    :straight t
    :config
    (setq elfeed-db-directory (expand-file-name "elfeed" user-emacs-directory)
          elfeed-show-entry-switch 'display-buffer)
    :bind
    ("C-x w" . elfeed ))

; Configure Elfeed with org mode
  (use-package elfeed-org
    :ensure t
    :straight t
    :config
    (elfeed-org)
    (setq rmh-elfeed-org-files (list (concat user-emacs-directory "elfeed.org"))))

(use-package elfeed-tube
  :ensure t ;; or :straight t
  :straight t
  :after elfeed
  :demand t
  :config
  ;; (setq elfeed-tube-auto-save-p nil) ; default value
  ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
  (elfeed-tube-setup)

  :bind (:map elfeed-show-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)
         :map elfeed-search-mode-map
         ("F" . elfeed-tube-fetch)
         ([remap save-buffer] . elfeed-tube-save)))

(use-package elfeed-tube-mpv
  :ensure t ;; or :straight t
  :straight t
  :bind (:map elfeed-show-mode-map
              ("C-c C-f" . elfeed-tube-mpv-follow-mode)
              ("C-c C-w" . elfeed-tube-mpv-where)))

(use-package elfeed-goodies
         :ensure t
	 :straight t
         :config
         (require 'elfeed)
         (require 'elfeed-goodies)

         (elfeed-goodies/setup))
#+end_src


#+begin_src emacs-lisp
(use-package elfeed-curate
         :ensure t
	 :straight t
:bind (:map elfeed-search-mode-map
              ("a" . elfeed-curate-edit-entry-annoation)
              ("x" . elfeed-curate-export-entries))
        (:map elfeed-show-mode-map
              ("a" . elfeed-curate-edit-entry-annoation)
              ("m" . elfeed-curate-toggle-star)
              ("q" . kill-buffer-and-window)))
#+end_src

#+begin_src emacs-lisp
(use-package elfeed-summary
  :ensure t
  :straight t
)
#+end_src

#+begin_src emacs-lisp
(use-package elfeed-tube
  :ensure t
  :straight t
)
#+end_src
**** Каналы rss
#+begin_src org :tangle ~/.emacs.d/elfeed.org :shebang "#+title: Elfeed configuration"
,* Blogs                                                                :elfeed:
,** Хабрахабр                                                           :Хабрахабр:
,*** [[https://habr.com/ru/rss/][Хабрахабр]]
#+end_src
*** TODO media
#+begin_src emacs-lisp
 ;; Emacs Multimedia System
  (use-package emms
    :straight t
    :ensure t
    :init
    :bind
    (("C-<f5>"   . emms-browser)
     ("M-<f5>" . emms)
     ("<XF86AudioPrev>" . emms-previous)
     ("<XF86AudioNext>" . emms-next)
     ("<XF86AudioPlay>" . emms-pause)))
#+end_src
*** Journal
    #+begin_src emacs-lisp
(use-package org-journal
  :straight t
  :config (setq org-journal-dir (concat DOCUMENTS_DIR "/Journal")
                org-journal-file-type 'monthly
                org-journal-find-file 'find-file
                org-journal-file-format "%Y-%m-%d.org"
                org-journal-date-format "%A, %Y-%m-%d")
  :bind (("C-c j j" . 'org-journal-new-entry)
         ("C-c j s" . 'org-journal-new-scheduled-entry)
         ("C-c j o" . 'org-journal-open-current-journal-file)
         ;; ("C-c j w" . 'mmk2410/org-journal-worktime)
	 ))
    #+end_src
*** Treemacs
#+begin_src emacs-lisp
    (use-package treemacs
    :ensure t
    :straight t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("C-x t s"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-b"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-evil
    :after (treemacs evil)
    :ensure t
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t
    :straight t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t
    :straight t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :straight t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :straight t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
*** centaur-tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
  :demand
  :config
  :ensure t
  :straight t
  :config
  (centaur-tabs-mode t)
  :bind
  ("C-<prior>" . centaur-tabs-backward)
  ("C-<next>" . centaur-tabs-forward))
#+end_src
*** Theme
#+begin_src emacs-lisp
;; (load-theme 'leuven t)
#+end_src
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :straight t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src


#+begin_src emacs-lisp
(use-package mini-frame
    :straight t
    :config
    (custom-set-variables
     '(mini-frame-show-parameters
       '((top . 10)
	 (width . 0.7)
	 (left . 0.5))))
   )
#+end_src

*** mode-line
#+begin_src emacs-lisp
 
;; (set-face-attribute 'mode-line nil
;; 		      :background "#353644"
;; 		      :foreground "white"
;; 		      :box '(:line-width 1 :color "#353644")
;; 		      :overline nil
;; 		      :underline nil)

;; (set-face-attribute 'mode-line-inactive nil
;; 		      :background "#565063"
;; 		      :foreground "white"
;; 		      :box '(:line-width 1 :color "#565063")
;; 		      :overline nil
;; 		      :underline nil)

;; (use-package telephone-line
;;   :straight t
;;   :init (telephone-line-mode t))
#+end_src

#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :straight t
  :init (doom-modeline-mode 1)
  :config
(setq doom-modeline-height 25)
)
#+end_src
*** windows zoom
#+begin_src emacs-lisp
(use-package zoom-window
  :straight t
  :ensure t
  :bind ("C-x C-z" . zoom-window-zoom)
)
#+end_src
*** comment
#+begin_src emacs-lisp
  (use-package comment-dwim-2
      :ensure t
      :straight t
      :bind ("C-/" . comment-dwim-2))
#+end_src
*** run code
#+begin_src emacs-lisp
  (use-package quickrun
    :ensure t
    :straight t
    :bind ("C-<f5>" . quickrun)
    )
#+end_src
*** Золотое сечение
#+begin_src emacs-lisp
(use-package zoom
  :commands zoom-mode
  :straight t
  :config
  (setq zoom-size '(0.618 . 0.618)))
(zoom-mode t)
#+end_src
*** Отступы выделяются с помощьюfont-lock
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
  :straight t
  :custom
  (highlight-indent-guides-method 'character)
  (highlight-indent-guides-character ?\|)
  (add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
  )
#+end_src
*** Форматировать все
#+begin_src emacs-lisp
  (use-package apheleia
  :straight t
  :defer 1
  :config
  (apheleia-global-mode +1))
#+end_src
*** ВЕРТИКАЛЬНОЕ интерактивное завершение
#+begin_src emacs-lisp
     ;; Enable vertico
  (use-package vertico
    :straight t
    :init
    (vertico-mode)

    ;; Different scroll margin
    ;; (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    ;; (setq vertico-cycle t)
    ) 
#+end_src
*** второстепенный режим для редактирования скобок
    #+begin_src emacs-lisp
	;; minor mode for editing parentheses
    ;; (use-package paredit
    ;;   :defer t
    ;;   :straight t
    ;;   :hook ((cider-repl-mode
    ;; 	      clojure-mode
    ;; 	      ielm-mode
    ;; 	      racket-mode
    ;; 	      racket-repl-mode
    ;; 	      slime-repl-mode
    ;; 	      lisp-mode
    ;; 	      emacs-lisp-mode
    ;; 	      lisp-interaction-mode
    ;; 	      scheme-mode) 
    ;; 	     . paredit-mode))
    #+end_src

*** auto-insert
#+begin_src emacs-lisp
(add-hook 'find-file-hooks 'auto-insert)
(setq auto-insert-directory (concat (getenv "HOME") "/.emacs.d/auto-insert/"))
(setq auto-insert 'other)
(setq auto-insert-query nil)

(setq auto-insert-alist '(
("\\.sh$" . ["insert.sh" alexott/auto-update-defaults])
("\\.lisp$" . ["insert.lisp" alexott/auto-update-defaults])
("\\.el$" . ["insert.el" alexott/auto-update-defaults])
("\\.org$" . ["insert.org" alexott/auto-update-defaults])
("\\.c$" . ["insert.c" alexott/auto-update-defaults])
                          ))
;; (add-to-list 'auto-insert-alist '(".*/projects/.*\\.cpp$" . ["insert-home.cpp" alexott/auto-update-c-source-file]))
;; (add-to-list 'auto-insert-alist '(".*/projects/.*\\.h$"   . ["insert-home.h" alexott/auto-update-header-file]))
;; (add-to-list 'auto-insert-alist '(".*/projects/.*\\.hpp$"   . ["insert-home.h" alexott/auto-update-header-file]))
;; (add-to-list 'auto-insert-alist '(".*/projects/.*\\.c$" . ["insert-home.cpp" alexott/auto-update-c-source-file]))

;; (defun alexott/auto-replace-header-name ()
;;   (save-excursion
;;     (while (search-forward "###" nil t)
;;       (save-restriction
;;         (narrow-to-region (match-beginning 0) (match-end 0))
;;         (replace-match (upcase (file-name-nondirectory buffer-file-name)))
;;         (subst-char-in-region (point-min) (point-max) ?. ?_)
;;         (subst-char-in-region (point-min) (point-max) ?- ?_)
;;         ))
;;     )
;;   )

(defun alexott/auto-replace-file-name ()
  (save-excursion
    ;; Replace @@@ with file name
    (while (search-forward "(>>FILE<<)" nil t)
      (save-restriction
        (narrow-to-region (match-beginning 0) (match-end 0))
        (replace-match (file-name-nondirectory buffer-file-name) t)
        ))
    )
  )

(defun alexott/auto-replace-file-name-no-ext ()
  (save-excursion
    ;; Replace @@@ with file name
    (while (search-forward "(>>FILE_NO_EXT<<)" nil t)
      (save-restriction
        (narrow-to-region (match-beginning 0) (match-end 0))
        (replace-match (file-name-sans-extension (file-name-nondirectory buffer-file-name)) t)
        ))
    )
  )

(defun alexott/insert-today ()
  "Insert today's date into buffer"
  (interactive)
  (insert (format-time-string "%A, %B %e %Y" (current-time))))

(defun alexott/auto-replace-date-time ()
  (save-excursion
    ;; replace DDDD with today's date
    (while (search-forward "(>>DATE<<)" nil t)
      (save-restriction
        (narrow-to-region (match-beginning 0) (match-end 0))
        (replace-match "" t)
        (alexott/insert-today)
        ))))

;; (defun alexott/auto-update-header-file ()
;;   (alexott/auto-replace-header-name)
;;   (alexott/auto-replace-file-name)
;;   )


(defun alexott/auto-update-defaults ()
  (alexott/auto-replace-file-name)
  (alexott/auto-replace-file-name-no-ext)
  (alexott/auto-replace-date-time)
  )
#+end_src
**** Шаблоны
#+begin_src C :tangle ~/.emacs.d/auto-insert/insert.c :mkdirp yes
/**
 * @file   (>>FILE<<)
 * @author Vladimir Ryazansew <elf.forest@yandex.ru>
 * 
 * @brief  
 * 
 * 
 */

/*#include "HHHH"*/
#+end_src


#+begin_src shell :tangle ~/.emacs.d/auto-insert/insert.sh :mkdirp yes
#!/bin/env sh
#
# File: (>>FILE<<)
#
# Created: (>>DATE<<) by Vladimir Ryazansew
#
#+end_src

#+begin_src shell :tangle ~/.emacs.d/auto-insert/insert.bash :mkdirp yes
#!/bin/env bash
#
# File: (>>FILE<<)
#
# Created: (>>DATE<<) by Vladimir Ryazansew
#
#+end_src


#+begin_src emacs-lisp :tangle ~/.emacs.d/auto-insert/insert.el :mkdirp yes
;;; (>>FILE<<) --- 

;; Copyright (C) Vladimir Ryazansew
;;
;; Author: Vladimir Ryazansew <elf.forest@yandex.ru>
;; Keywords: 
;; Requirements: 
;; Status: not intended to be distributed yet




;;; (>>FILE<<) ends here
#+end_src

#+begin_src org-mode :tangle ~/.emacs.d/auto-insert/insert.org :mkdirp yes
#+TITLE: (>>FILE_NO_EXT<<)
#+AUTHOR: Vladimir Ryazansew
#+EMAIL: elf.forest@yandex.ru
#+DATE: (>>DATE<<)
#+OPTIONS: num:nil
#+end_src
*** eww 
#+begin_src emacs-lisp 
(use-package eww
:straight t
)
#+end_src
*** custom
#+begin_src emacs-lisp
(setq custom-file
      (if (boundp 'server-socket-dir)
          (expand-file-name "custom.el" server-socket-dir)
        (expand-file-name (format "emacs-custom-%s.el" (user-uid)) temporary-file-directory)))
(load custom-file t)
#+end_src
*** exwm

https://github.com/ch11ng/exwm/wiki/Configuration-Example
https://github.com/ch11ng/exwm/wiki
https://pbrown.me/blog/exwm-raspberry-pi/
https://systemcrafters.net/emacs-desktop-environment/
youTube
https://www.youtube.com/watch?v=f7xB2fFk1tQ&list=PLEoMzSkcN8oNPbEMYEtswOVTvq7CVddCS

#+begin_src emacs-lisp 
(use-package exwm
  :ensure t
  :straight t
  :config 
  (require 'exwm)
  (require 'exwm-config)
  
)
#+end_src
**** настройка XStart
:PROPERTIES:
:CUSTOM_ID: init
:header-args:bash: :tangle ~/.emacs.d/exwm/exwm.desktop :mkdirp yes 
:END:
#+begin_src bash 
[Desktop Entry]
Name=EmacsWM
Comment=Emacs Window Manager
Exec=emacs
Type=Application

  # [Desktop Entry]
  # Name=EXWM
  # Comment=Emacs Window Manager
  # Exec=sh /home/elf/.emacs.d/exwm/start-exwm.sh
  # TryExec=sh
  # Type=Application
  # X-LightDM-DesktopName=exwm
  # DesktopNames=exwm



# [Desktop Entry]
# Name=Emacs
# Exec=emacs
# Type=Application

#+end_src
****  script start EXWM
:PROPERTIES:
:CUSTOM_ID: init
:header-args:bash: :tangle ~/.emacs.d/exwm/start-exwm.sh :mkdirp yes :shebang "#!/bin/env bash"
:END:
#+begin_src bash
spice-vdagent
exec dbus-launch --exit-with-session emacs -mm --debug-init
#+end_src
- настройте это с помощью =sudo ln -f -s  /home/elf/.emacs.d/exwm/exwm.desktop /usr/share/xsessions/exwm.desktop=
*** test
#+begin_src emacs-lisp
;; (add-hook 'after-save-hook 
;; 	  '(lambda ()(org-html-export-to-html)))
#+end_src
*** работа с интернет закладками
#+begin_src emacs-lisp
(use-package ebuku
  :straight t
  :ensure t
  :init
)
#+end_src
*** Хоткеи на русской раскладке конец
#+begin_src emacs-lisp
;; ========== Хоткеи на русской раскладке
;; А вот эта строка должна быть в самом конце
(cfg:reverse-input-method 'russian-computer)
#+end_src

** Настройка systemd для emacs
*** Настройка сервера
:PROPERTIES:
:CUSTOM_ID: emacs_server
:header-args:bash: :tangle ~/.config/systemd/user/emacsd.service :mkdirp yes
:END:
Для включение настройки сервера надо выполнить комманды
#+begin_src 
  systemctl --user enable emacsd
  systemctl --user start emacsd
#+end_src
Посмотреть работает emacs server
#+begin_src 
  systemctl --user status emacsd
#+end_src

#+begin_src bash
[Unit]
Description=Emacs: the extensible, self-documenting text editor
Documentation=man:emacs(1) info:Emacs


[Service]
Type=forking
ExecStart=/bin/emacs --daemon
ExecStop=/bin/emacsclient --eval "(progn (setq kill-emacs-hook nil) (kill-emacs))"
Restart=on-failure
Environment=DISPLAY=:%i
TimeoutStartSec=0

[Install]
WantedBy=default.target
#+end_src
*** Настройка клиента
:PROPERTIES:
:CUSTOM_ID: emacs_server
:header-args:bash: :tangle ~/.local/share/applications/emacs_client.desktop :mkdirp yes 
:END:
#+begin_src bash
  [Desktop Entry]
  Name=Emacs (Client1)
  GenericName=Text Editor
  Comment=Edit text
  MimeType=text/english;text/plain;text/x-makefile;text/x-c++hdr;text/x-c++src;text/x-chdr;text/x-csrc;text/x-java;text/x-moc;text/x-pascal;text/x-tcl;text/x-tex;application/x-shellscript;text/x-c;text/x-c++;
  Exec=sh -c "if [ -n \\"\\$*\\" ]; then exec emacsclient --alternate-editor= --display=\\"\\$DISPLAY\\" \\"\\$@\\"; else exec emacsclient --alternate-editor= --create-frame; fi" placeholder %F
  Icon=emacs28
  Type=Application
  Terminal=false
  Categories=Development;TextEditor;
  StartupNotify=true
  StartupWMClass=Emacs
  Keywords=emacsclient;
  Actions=new-window;new-instance;

  [Desktop Action new-window]
  Name=New Window
  Exec=/usr/bin/emacsclient28 --alternate-editor= --create-frame %F

  [Desktop Action new-instance]
  Name=New Instance
  Exec=emacs %F

#+end_src 
